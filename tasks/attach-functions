understanding function attachment

The goal is to have something happens when an event on an interface occurs
The event typically originates from a user interface, but may also originate from a network interface.
In some cases when an event occurs, objects with functions attached at a specific point will be called.  This is the contract used in the browser and so composite
needs to support this mode of operation.  Socket.io allows the user to pass in a function to call on a named event.  


Functions nodes such as Actions need to attach to dom objects, in order to take effect.
Function nodes such as pipeline functions need to attache to each other, in order to act as a pipe
There is the node relationship and the runtime relationship.
The node relationship is typically parent/child.  The child attaches to the parent's runtime object or the dom object under the runtime object.
Since the attachment point is variable, the child node needs to describe where to attach its functionality
Typical locations are node.object.el.onmouseup, node.object.el.click, node.object.add
The attachment point has been described differently depending on if the attachment point is the el dom element or the node object.
This should be simplified.  Instead describe that attachment point as a path e.g. 'node.object.el.onmouseup', 'node.object.add'

Specifics

ServerPage could be instantiated within a node.  The url would be in the node.
NodeSocket and ServerPage could be combined.  I think what is in ServerPage will become redundant and the separation won't be needed.
This depends on node function chaining.

Method A.
--------
If two nodes have a parent child relationship and the child attaches a function to the parent object, then the two nodes are said to be chained.
A child can create a chain function by,
1. storing the original function, pf, in the child
2. creating a new function, cf
3. the new function replaces the original function on the parent.
4. the new function can doSomething, then pass the result on to pf.  This is called urgent chaining.
5. the new function can call pf, the doSomething with the result from pf.

A child can remove a chain by,
1. placing pf back on the parent object.
2. anything chained to the child function IS  NOW BROKEN, because they are chained to cf, which is getting removed.
3. therefore this WILL NOT WORK.

Method B.
---------
If two nodes have a parent child relationship and the child attaches a function to the output of the parent object, then the two nodes ares said to be chained.
A child can create a chain function by,
1. attaching a function cf, to parent.output
2. cf is run when the parent function calls parent.output(node)
3. the child process node, then calls its child.output if it exists.
4. this WILL NOT WORK for multiple children because they will each replace parent.output.  Chaining like Method A. would result in the removal complication.

A child removes itself from the chain by,
1. setting parent.output = child.output.

Method C.
---------
If two nodes have a parent child relationship and the parent calls the perform function passing the result of its computation to each childs perform, then the two nodes ares said to be chained.
A parent can create a chain function by,
1. defining a perform function
2. getting its children
3. if they have a perform function, child.object.perform, then pass the result to their perform function

A child removes itself from the chain by,
1. Setting its children to the parent children.


Use Method C.

Dom Adapter
-----------
Calling install will connect the adapter to the dom object via callback function.
The callback function will pass the dom element and event to it children's add function.
Note this means add() can accept types other than node for some functions.  I think this is healthy. Nodes that take something other than a node should
explicitly state that fact in their jsdoc.  They are relatively rare functional nodes that transform other system types to nodes.
Typically, their will be only one child node, and it will take the dom element as input, though it is possible to attach multiple nodes to a Dom Adapter.
They will tend to transform existing nodes and then send the result through the pipeline.  The pipeline can be retrieved by looking it up in the DAG.

Action is an adapter that attaches a function to a dom object at el[node.event].
Could this be more general? Yes, a path could be specified where the function should attach
This would make for a shorter solution. Alternatively, a new class could be created that would attach to a different point of a node.



Socket Adapater
---------------
Calling install will connect the adapter to the socket via callback function.
The callback function will pass the node to its children via the add function.  These should all be node objects.

Disk endpoint
-------------
The disk endpoint is a functional node that stores the nodes to disk in the order received.

Disk node buffer:
-----------------
The disk node buffer is a functional node that pushes nodes to a pipeline of children, starting at the top of its buffer file, and working towards the end of the buffer file.
At startup, the pipeline will be generated and then the disk node buffer placed at the front of the pipeline.  Once installed the disk node buffer will stream
nodes into the pipleline.  It then records any nodes that are added to the end of the file. 

Optimization (perhaps do this first):
A dag should be able to be constructed from a file by loading a list of nodes in JSON format into the DAG.  
A dag should be able to be stored to disk by simply turning the DAG backing object to JSON and then saving to disk.


Task Order:
-----------
0. Create node pipeline
0.a. test the bootstrapping of a new pipeline from object supplier to DAG creation to unique and so on
0.b. ObjectSupplier is a functional node and the only functional node created in code.  Subsequent nodes will be created by ObjectSupplier.
0.c. If COMPOSITE.DAG exists, ObjectSupplier will check for childrens and pass on nodes to children.
1. Implement Method C.
1.a. ObjectSupplier may inherit from a Method C. class
1.a.1. Method C. refers to COMPOSITE.DAG

2. Create DOM adapter.
2.a. test that events trigger an add further down the pipeline

